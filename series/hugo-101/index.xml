<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>npf.io</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://npf.io/series/hugo-101/index.xml</link>
    <language>en-us</language>
    <author>Nate Finch</author>
    <copyright>2014 Nate Finch</copyright>
    <updated>Fri, 08 Aug 2014 11:12:44 UTC</updated>
    
    
    <item>
      <title>Making It a Series</title>
      <link>http://npf.io/2014/08/making-it-a-series/</link>
      <pubDate>Fri, 08 Aug 2014 11:12:44 UTC</pubDate>
      <author>Nate Finch</author>
      <guid>http://npf.io/2014/08/making-it-a-series/</guid>
      <description>&lt;p&gt;I obviously have a lot to talk about with Hugo, so I decided I wanted to make
this into a series of posts, and have links at the bottom of each post
automatically populated with the other posts in the series.  This turned out to
be somewhat of a challenge, but doable with some effort&amp;hellip; hopefully someone
else can learn from my work.&lt;/p&gt;

&lt;p&gt;This now brings us to &lt;a href=&#34;http://hugo.spf13.com/taxonomies/overview&#34;&gt;Taxonomies&lt;/a&gt;.
Taxonomies are basically just like tags, except that you can have any number of different types of tags.  So you might have &amp;ldquo;Tags&amp;rdquo; as a taxonomy, and thus you can give a content tags with values of &amp;ldquo;go&amp;rdquo; and &amp;ldquo;programming&amp;rdquo;.  Buy you can have a taxonomy of &amp;ldquo;series&amp;rdquo; and give content a series of &amp;ldquo;Hugo 101&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Taxonomy is sort of like relatable metadata to gather multiple pieces of content
together in a structured way&amp;hellip; it&amp;rsquo;s almost like a minimal relational database.
Taxonomies are listed in your site&amp;rsquo;s metadata, and consist of a list of keys.
Each piece of content can specify one or more values for those keys (the Hugo
documentation calls the values &amp;ldquo;Terms&amp;rdquo;).  The values are completely ad-hoc, and
don&amp;rsquo;t need to be pre-defined anywhere.  Hugo automatically creates pages where
you can view all content based on Taxonomies and see how the various values are
cross-referenced against other content.  This is a way to implement tags on
posts, or series of posts.&lt;/p&gt;

&lt;p&gt;So, for my example, we add a Taxonomy to my site config called &amp;ldquo;series&amp;rdquo;.  Then
in this post, the &amp;ldquo;Hugo: Beyond the Defaults&amp;rdquo; post, and the &amp;ldquo;Hugo is Friggin&amp;rsquo; Awesome&amp;rdquo; post, I just add &lt;code&gt;series =
[&amp;quot;Hugo 101&amp;quot;]&lt;/code&gt;  (note the brackets - the values for the taxonomy are actually a
list, even if you only have one value).  Now all these posts are magically related together under a taxonomy called &amp;ldquo;series&amp;rdquo;.  And Hugo automatically generates a listing for this taxonomy value at &lt;a href=&#34;http://npf.io/series/hugo-101&#34;&gt;/series/hugo-101&lt;/a&gt; (the taxonomy value gets url-ized).  Any other series I make will be under a similar directory.&lt;/p&gt;

&lt;p&gt;This is fine and dandy and pretty aweomse out of the box&amp;hellip; but I really want to
automatically generate a list of posts in the series at the bottom of each post
in the series.  This is where things get tricky, but that&amp;rsquo;s also where things
get interesting.&lt;/p&gt;

&lt;p&gt;The examples for &lt;a href=&#34;http://hugo.spf13.com/taxonomies/displaying&#34;&gt;displaying
Taxonomies&lt;/a&gt; all &amp;ldquo;hard code&amp;rdquo; the
taxonomy value in the template&amp;hellip; this works great if you know ahead of time
what value you want to display, like &amp;ldquo;all posts with tag = &amp;lsquo;featured&amp;rsquo;&amp;rdquo;.
However, it doesn&amp;rsquo;t work if you don&amp;rsquo;t know ahead of time what the taxonomy value
will be (like the series on the current post).&lt;/p&gt;

&lt;p&gt;This is doable, but it&amp;rsquo;s a little more complicated.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll give you a dump of the relevant portion of my post template and then talk about how I got there:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if .Params.series }}
    {{ $name := index .Params.series 0 }}
    &amp;lt;hr/&amp;gt;
	&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot; id=&amp;quot;series&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;This is a post in the 
	&amp;lt;b&amp;gt;{{$name}}&amp;lt;/b&amp;gt; series.&amp;lt;br/&amp;gt;
	Other posts in this series:&amp;lt;/p&amp;gt;

    {{ $name := $name | urlize }}
    {{ $series := index .Site.Taxonomies.series $name }}
    &amp;lt;ul class=&amp;quot;series&amp;quot;&amp;gt;
    {{ range $series.Pages }}
    	&amp;lt;li&amp;gt;{{.Date.Format &amp;quot;Jan 02, 2006&amp;quot;}} -
    	&amp;lt;a href=&amp;quot;{{.Permalink}}&amp;quot;&amp;gt;{{.LinkTitle}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {{end}}
    &amp;lt;/ul&amp;gt;
{{end}} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we start off defining this part of the template to only be used if the post
has a series.  Right, sure, move on.&lt;/p&gt;

&lt;p&gt;Now, the tricky part&amp;hellip; the taxonomy values for the current page resides in the
.Params values, just like any other custom metadata you assign to the page.&lt;/p&gt;

&lt;p&gt;Taxonomy values are always a list (so you can give things multiple tags etc),
but I know that I&amp;rsquo;ll never give something more than one series, so I can just
grab the first item from the list.  To do that, I use the index function, which
is just like calling series[0] and assign it to the $name variable.&lt;/p&gt;

&lt;p&gt;Now another tricky part&amp;hellip; the series in the metadata is in the pretty form you
put into the metadata, but the list of Taxonomies in .Site.Taxonomies is in the
urlized form&amp;hellip;  How did I figure that out?  Printf
debugging.  Hugo&amp;rsquo;s auto-reloading makes it really easy to use the template
itself to figure out what&amp;rsquo;s going on with the template and the data.&lt;/p&gt;

&lt;p&gt;When I started writing this template, I just put &lt;code&gt;{{$name}}&lt;/code&gt; in my post template
after the line where I got the name, and I could see it rendered on webpage of
my post that the name was &amp;ldquo;Hugo 101&amp;rdquo;.  Then I put &lt;code&gt;{{.Site.Taxonomies.series}}&lt;/code&gt;
and I saw something like &lt;code&gt;map[hugo-101:[{0 0xc20823e000} {0 0xc208048580} {0
0xc208372000}]]&lt;/code&gt;  which is ugly, but it showed me that the value in the map is
&amp;ldquo;hugo-101&amp;rdquo;&amp;hellip; and I realized it was using the urlized version, so I used the
pre-defined hugo function &lt;code&gt;urlize&lt;/code&gt; to convert the pretty series.&lt;/p&gt;

&lt;p&gt;And from there it&amp;rsquo;s just a matter of using &lt;code&gt;index&lt;/code&gt; again, this time to use
&lt;code&gt;$name&lt;/code&gt; as a key in the map of series&amp;hellip;.  .Site.Taxonomies is a map
(dictionary) of Taxonomy names (like &amp;ldquo;series&amp;rdquo;) to maps of Taxonomy values (like
&amp;ldquo;hugo-101&amp;rdquo;) to lists of pages.  So, .Site.Taxonomies.series reutrns a map of
series names to lists of pages&amp;hellip; index that by the current series names, and
bam, list of pages.&lt;/p&gt;

&lt;p&gt;And then it&amp;rsquo;s just a matter of iterating over the pages and displaying them
nicely. And what&amp;rsquo;s great is that this is now all automatic&amp;hellip; all old posts get
updated with links to the new posts in the series, and any new series I make,
regardless of the name, will get the nice list of posts at the bottom for that series.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Hugo: Beyond the Defaults</title>
      <link>http://npf.io/2014/08/hugo-beyond-the-defaults/</link>
      <pubDate>Fri, 08 Aug 2014 10:07:46 UTC</pubDate>
      <author>Nate Finch</author>
      <guid>http://npf.io/2014/08/hugo-beyond-the-defaults/</guid>
      <description>&lt;p&gt;In my last post, I had deployed what is almost the most basic Hugo site
possible.  The only reason it took more then 10 minutes is because I wanted to
tweak the theme.  However, there were a few things that immediately annoyed me.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t like having to type &lt;code&gt;hugo -t hyde&lt;/code&gt; all the time.  Well, turns out
that&amp;rsquo;s not necessary.  You can just put  &lt;code&gt;theme = &amp;quot;hyde&amp;quot;&lt;/code&gt; in your site
config, and never need to type it again.  Sweet.  Now to run the local server, I
can just run &lt;code&gt;hugo server -w&lt;/code&gt;, and for final generation, I can just run &lt;code&gt;hugo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next is that my posts were under npf.io/post/postname &amp;hellip; which is not the end
of the world, but I really like seeing the date in post URLs, so that it&amp;rsquo;s easy
to tell if I&amp;rsquo;m looking at something really, really old.  So, I went about
looking at how to do that.  Turns out, it&amp;rsquo;s trivial.  Hugo has a feature called
&lt;a href=&#34;http://hugo.spf13.com/extras/permalinks&#34;&gt;permalinks&lt;/a&gt;, where you can define the
format of the url for a section (a section is a top level division of your site,
denoted by a top level folder under content/).  So, all you have to do is, in
your site&amp;rsquo;s config file, put some config that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:filename/&amp;quot;
    code = &amp;quot;/:filename/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While we&amp;rsquo;re at it, I had been putting my code in the top level content
directory, because I wanted it available at npf.io/projectname  &amp;hellip;. however
there&amp;rsquo;s no need to do that, I can put the code under the code directory and just
give it a permalink to show at the top level of the site.  Bam, awesome, done.&lt;/p&gt;

&lt;p&gt;One note: Don&amp;rsquo;t forget the slash at the end of the permalink.&lt;/p&gt;

&lt;p&gt;But wait, this will move my &amp;ldquo;Hugo is Friggin&amp;rsquo; Awesome&amp;rdquo; post to a different URL,
and Steve Francia already tweeted about it with the old URL.  I don&amp;rsquo;t want that
url to send people to a 404 page!
&lt;a href=&#34;http://hugo.spf13.com/extras/aliases&#34;&gt;Aliases&lt;/a&gt; to the rescue.  Aliases are just
a way to make redirects from old URLs to new ones.  So I just put &lt;code&gt;aliases =
[&amp;quot;/post/hugo-is-awesome/&amp;quot;]&lt;/code&gt; in the metadata at the top of that post, and now
links to there will redirect to the new location.  Awesome.&lt;/p&gt;

&lt;p&gt;Ok, so cool&amp;hellip; except that I don&amp;rsquo;t really want the content for my blog posts
under content/post/ &amp;hellip; I&amp;rsquo;d prefer them under content/blog, but still be of type
&amp;ldquo;post&amp;rdquo;.  So let&amp;rsquo;s change that too.  This is pretty easy, just rename the folder
from post to blog, and then set up an
&lt;a href=&#34;http://hugo.spf13.com/content/archetypes&#34;&gt;archetype&lt;/a&gt; to default the metadata
under /blog/ to type = &amp;ldquo;post&amp;rdquo;.  Archetypes are default metadata for a section,
so in this case, I make a file archetypes/blog.md and add type= &amp;ldquo;post&amp;rdquo; to the
archetype&amp;rsquo;s metadata, and now all my content created with &lt;code&gt;hugo new
blog/foo.md&lt;/code&gt; will be prepopulated as type &amp;ldquo;post&amp;rdquo;.  (does it matter if the type
is post vs. blog?  no.  But it matters to me ;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/mlafeldt&#34;&gt;@mlafeldt&lt;/a&gt; on Twitter pointed out my RSS feed was
wonky&amp;hellip;. wait, I have an RSS feed?  Yes, Hugo &lt;a href=&#34;http://hugo.spf13.com/templates/rss&#34;&gt;has that
too&lt;/a&gt;.  There are feed XML files
automatically output for most listing directories&amp;hellip; and the base feed for the
site is a list of recent content.  So, I looked at what Hugo had made for me
(index.xml in the root output directory)&amp;hellip; this is not too bad, but I don&amp;rsquo;t
really like the title, and it&amp;rsquo;s including my code content in the feed as well as
posts, which I don&amp;rsquo;t really want.  Luckily, this is trivial to fix.  The RSS xml
file is output using a Go template just like everything else in the output.
It&amp;rsquo;s trivial to adjust the template so that it only lists content of type
&amp;ldquo;post&amp;rdquo;, and tweak the feed name, etc.&lt;/p&gt;

&lt;p&gt;I was going to write about how I got the series stuff at the bottom of this
page, but this post is long enough already, so I&amp;rsquo;ll just make that into its own
post, as the next post in the series! :)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Hugo Is Friggin&#39; Awesome</title>
      <link>http://npf.io/2014/08/hugo-is-awesome/</link>
      <pubDate>Fri, 01 Aug 2014 06:45:00 UTC</pubDate>
      <author>Nate Finch</author>
      <guid>http://npf.io/2014/08/hugo-is-awesome/</guid>
      <description>&lt;p&gt;This blog is powered by &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt;, a static site generator
written by Steve Francia (aka spf13).  It is, of course, written in Go.  It is
pretty similar to &lt;a href=&#34;jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;, in that you write markdown, run a
little program (hugo) and html pages come out the other end in the form of a
full static site.  What&amp;rsquo;s different is that Jekyll is written in ruby and is
relatively slow, and Hugo is written in Go and is super fast&amp;hellip; only taking a
few milliseconds to render each page.&lt;/p&gt;

&lt;p&gt;Hugo includes a webserver to serve the content, which will regenerate the site
automatically when you change your content.  Your browser will update with the
changes immediately, making your development cycle for a site a very tight
loop.&lt;/p&gt;

&lt;p&gt;The basic premise of Hugo is that your content is organized in a specific way on
purpose.  Folders of content and the name of the files combine to turn into the
url at which they are hosted. For example, content/foo/bar/baz.md will be hosted
at &amp;lt;site&amp;gt;/foo/bar/baz.&lt;/p&gt;

&lt;p&gt;Every content file has a section of metadata at the top that allows you to
specify information about the content, like the title, date, even arbitrary data
for your specific site (for example, I have lists of badges that are shown on
pages for code projects).&lt;/p&gt;

&lt;p&gt;All the data in a content file is just that - data.  Other than markdown
specifying a rough view of your page, the actual way the content is viewed is
completely separated from the data.  Views are written in Go&amp;rsquo;s templating
language, which is quick to pick up and easy to use if you&amp;rsquo;ve used other
templating languages (or even if, like me, you haven&amp;rsquo;t).  This lets you do
things like iterate over all the entries in a menu and print them out in a ul/li
block, or iterate over all the posts in your blog and display them on the main
page.&lt;/p&gt;

&lt;p&gt;You can learn more about Hugo by going to &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;its site&lt;/a&gt;,
which, of course, is built using Hugo.&lt;/p&gt;

&lt;p&gt;The static content for this site is hosted on github pages at
&lt;a href=&#34;https://github.com/natefinch/natefinch.github.io&#34;&gt;https://github.com/natefinch/natefinch.github.io&lt;/a&gt;. But the static content is
relatively boring&amp;hellip; that&amp;rsquo;s what you&amp;rsquo;re looking at in your browser right now.
What&amp;rsquo;s interesting is the code behind it.  That lives in a separate repo on
github at &lt;a href=&#34;https://github.com/natefinch/npf&#34;&gt;https://github.com/natefinch/npf&lt;/a&gt;.  This is where the markdown content
and templates live.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I have things set up locally&amp;hellip; all open source code on my machine
lives in my GOPATH (which is set to my HOME).  So, it&amp;rsquo;s easy to find anything I
have ever downloaded. Thus, the static site lives at
$GOPATH/src/github.com/natefinch/natefinch.github.io and the markdown +
templates lives in $GOPATH/src/github.com/natefinch/npf.  I created a symbolic
link under npf called public that points to the natefinch.github.io directory.
This is the directory that hugo outputs the static site to by default&amp;hellip; that
way Hugo dumps the static content right into the correct directory for me to
commit and push to github.  I just had to add public to my .gitignore so
everyone wouldn&amp;rsquo;t get confused.&lt;/p&gt;

&lt;p&gt;Then, all I do is go to the npf directory, and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/urlofpost.md
hugo server --buildDrafts --watch -t hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That generates a new content item that&amp;rsquo;ll show up on my site under
/post/urlofpost.  Then it runs the local webserver so I can watch the content by
pointing a browser at localhost:1313 on a second monitor as I edit the post in a
text editor. hyde is the name of the theme I&amp;rsquo;m using, though I have modified
it.  Note that hugo will mark the content as a draft by default, so you need
&amp;ndash;buildDrafts for it to get rendered locally, and remember to delete the draft =
true line in the page&amp;rsquo;s metadata when you&amp;rsquo;re ready to publish, or it won&amp;rsquo;t show
up on your site.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m satisfied, kill the server, and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to generate the final site output, switch into the public directory, and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -am &amp;quot;some new post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.  Super easy, super fast, and no muss.  Coming from Blogger, this is
an amazingly better workflow with no wrestling with the WYSIWYG editor to make
it display stuff in a reasonable fashion.  Plus I can write posts 100% offline
and publish them when I get back to civilization.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to Hugo, and a lot more I want to do with the site, but that
will come in time and with more posts :)&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>