<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on npf.io </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://npf.io/post/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Fri, 01 Aug 2014 06:45:00 UTC</updated>
    
    <item>
      <title>Hugo Is Friggin&#39; Awesome</title>
      <link>http://npf.io/post/hugo-is-awesome</link>
      <pubDate>Fri, 01 Aug 2014 06:45:00 UTC</pubDate>
      
      <guid>http://npf.io/post/hugo-is-awesome</guid>
      <description>&lt;p&gt;This blog is powered by &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt;, a static site generator
written by Steve Francia (aka spf13).  It is, of course, written in Go.  It is
pretty similar to &lt;a href=&#34;jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;, in that you write markdown, run a
little program (hugo) and html pages come out the other end in the form of a
full static site.  What&amp;rsquo;s different is that Jekyll is written in ruby and is
relatively slow, and Hugo is written in Go and is super fast&amp;hellip; only taking a
few milliseconds to render each page.&lt;/p&gt;

&lt;p&gt;Hugo includes a webserver to serve the content, which will regenerate the site
automatically when you change your content.  Your browser will update with the
changes immediately, making your development cycle for a site a very tight
loop.&lt;/p&gt;

&lt;p&gt;The basic premise of Hugo is that your content is organized in a specific way on
purpose.  Folders of content and the name of the files combine to turn into the
url at which they are hosted. For example, content/foo/bar/baz.md will be hosted
at &lt;site&gt;/foo/bar/baz.&lt;/p&gt;

&lt;p&gt;Every content file has a section of metadata at the top that allows you to
specify information about the content, like the title, date, even arbitrary data
for your specific site (for example, I have lists of badges that are shown on
pages for code projects).&lt;/p&gt;

&lt;p&gt;All the data in a content file is just that - data.  Other than markdown
specifying a rough view of your page, the actual way the content is viewed is
completely separated from the data.  Views are written in Go&amp;rsquo;s templating
language, which is quick to pick up and easy to use if you&amp;rsquo;ve used other
templating languages (or even if, like me, you haven&amp;rsquo;t).  This lets you do
things like iterate over all the entries in a menu and print them out in a ul/li
block, or iterate over all the posts in your blog and display them on the main
page.&lt;/p&gt;

&lt;p&gt;You can learn more about Hugo by going to &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;its site&lt;/a&gt;,
which, of course, is built using Hugo.&lt;/p&gt;

&lt;p&gt;The static content for this site is hosted on github pages at
&lt;a href=&#34;https://github.com/natefinch/natefinch.github.io&#34;&gt;https://github.com/natefinch/natefinch.github.io&lt;/a&gt;. But the static content is
relatively boring&amp;hellip; that&amp;rsquo;s what you&amp;rsquo;re looking at in your browser right now.
What&amp;rsquo;s interesting is the code behind it.  That lives in a separate repo on
github at &lt;a href=&#34;https://github.com/natefinch/npf&#34;&gt;https://github.com/natefinch/npf&lt;/a&gt;.  This is where the markdown content
and templates live.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I have things set up locally&amp;hellip; all open source code on my machine
lives in my GOPATH (which is set to my HOME).  So, it&amp;rsquo;s easy to find anything I
have ever downloaded. Thus, the static site lives at
$GOPATH/src/github.com/natefinch/natefinch.github.io and the markdown +
templates lives in $GOPATH/src/github.com/natefinch/npf.  I created a symbolic
link under npf called public that points to the natefinch.github.io directory.
This is the directory that hugo outputs the static site to by default&amp;hellip; that
way Hugo dumps the static content right into the correct directory for me to
commit and push to github.  I just had to add public to my .gitignore so
everyone wouldn&amp;rsquo;t get confused.&lt;/p&gt;

&lt;p&gt;Then, all I do is got to the npf directory, and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/urlofpost.md
hugo server --buildDrafts --watch -t hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That generates a new content item that&amp;rsquo;ll show up on my site under
/post/urlofpost.  Then it runs the local webserver so I can watch the content by
pointing a browser at localhost:1313 on a second monitor as I edit the post in a
text editor. hyde is the name of the theme I&amp;rsquo;m using, though I have modified
it.  Note that hugo will mark the content as a draft by default, so you need
&amp;ndash;buildDrafts for it to get rendered locally, and remember to delete the draft =
true line in the page&amp;rsquo;s metadata when you&amp;rsquo;re ready to publish, or it won&amp;rsquo;t show
up on your site.&lt;/p&gt;

&lt;p&gt;When I&amp;rsquo;m satisfied, kill the server, and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to generate the final site output, switch into the public directory, and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -am &amp;quot;some new post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it.  Super easy, super fast, and no muss.  Coming from Blogger, this is
an amazingly better workflow with no wrestling with the WYSIWYG editor to make
it display stuff in a reasonable fashion.  Plus I can write posts 100% offline
and publish them when I get back to civilization.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to Hugo, and a lot more I want to do with the site, but that
will come in time and with more posts :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>http://npf.io/post/first</link>
      <pubDate>Fri, 01 Aug 2014 06:30:00 UTC</pubDate>
      
      <guid>http://npf.io/post/first</guid>
      <description>&lt;p&gt;This is the first post of my new blog.  You may (eventually) see old posts
showing up behind here, those have been pulled in from my personal blog at
&lt;a href=&#34;http://blog.natefinch.com&#34;&gt;blog.natefinch.com&lt;/a&gt;. I&amp;rsquo;ve decided to split off my
programming posts so that people who only want to see the coding stuff don&amp;rsquo;t
have to see my personal posts, and people that only want to see my personal
stuff don&amp;rsquo;t have to get inundated with programming posts.&lt;/p&gt;

&lt;p&gt;Right now the site is pretty basic, but I will add more features to it, such as post history etc.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>