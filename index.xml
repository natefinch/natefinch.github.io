<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Code by Nate Finch </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:52783/index.xml</link>
    <language>en-us</language>
    
    
    <updated>Mon, 28 Jul 2014 11:28:15 UTC</updated>
    
    <item>
      <title>Lumberjack</title>
      <link>http://localhost:52783/lumberjack</link>
      <pubDate>Mon, 28 Jul 2014 11:28:15 UTC</pubDate>
      
      <guid>http://localhost:52783/lumberjack</guid>
      <description>

&lt;h4 id=&#34;toc_0&#34;&gt;Lumberjack is a Go package for writing logs to rolling files.&lt;/h4&gt;

&lt;p&gt;Note that this is v2.0 of lumberjack, and should be imported using gopkg.in
thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;gopkg.in/natefinch/lumberjack.v2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package name remains simply lumberjack, and the code resides at
&lt;a href=&#34;https://github.com/natefinch/lumberjack&#34;&gt;https://github.com/natefinch/lumberjack&lt;/a&gt; under the v2.0 branch.&lt;/p&gt;

&lt;p&gt;Lumberjack is intended to be one part of a logging infrastructure.
It is not an all-in-one solution, but instead is a pluggable
component at the bottom of the logging stack that simply controls the files
to which logs are written.&lt;/p&gt;

&lt;p&gt;Lumberjack plays well with any logging package that can write to an
io.Writer, including the standard library&amp;rsquo;s log package.&lt;/p&gt;

&lt;p&gt;Lumberjack assumes that only one process is writing to the output files.
Using the same lumberjack configuration from multiple processes on the same
machine will result in improper behavior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To use lumberjack with the standard library&amp;rsquo;s log package, just pass it into the SetOutput function when your application starts.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;log.SetOutput(&amp;amp;lumberjack.Logger{
    Filename:   &amp;quot;/var/log/myapp/foo.log&amp;quot;,
    MaxSize:    500, // megabytes
    MaxBackups: 3,
    MaxAge:     28, //days
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;type Logger&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Logger struct {
    // Filename is the file to write logs to.  Backup log files will be retained
    // in the same directory.  It uses &amp;lt;processname&amp;gt;-lumberjack.log in
    // os.TempDir() if empty.
    Filename string `json:&amp;quot;filename&amp;quot; yaml:&amp;quot;filename&amp;quot;`

    // MaxSize is the maximum size in megabytes of the log file before it gets
    // rotated. It defaults to 100 megabytes.
    MaxSize int `json:&amp;quot;maxsize&amp;quot; yaml:&amp;quot;maxsize&amp;quot;`

    // MaxAge is the maximum number of days to retain old log files based on the
    // timestamp encoded in their filename.  Note that a day is defined as 24
    // hours and may not exactly correspond to calendar days due to daylight
    // savings, leap seconds, etc. The default is not to remove old log files
    // based on age.
    MaxAge int `json:&amp;quot;maxage&amp;quot; yaml:&amp;quot;maxage&amp;quot;`

    // MaxBackups is the maximum number of old log files to retain.  The default
    // is to retain all old log files (though MaxAge may still cause them to get
    // deleted.)
    MaxBackups int `json:&amp;quot;maxbackups&amp;quot; yaml:&amp;quot;maxbackups&amp;quot;`

    // LocalTime determines if the time used for formatting the timestamps in
    // backup files is the computer&#39;s local time.  The default is to use UTC
    // time.
    LocalTime bool `json:&amp;quot;localtime&amp;quot; yaml:&amp;quot;localtime&amp;quot;`
    // contains filtered or unexported fields
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Logger is an io.WriteCloser that writes to the specified filename.&lt;/p&gt;

&lt;p&gt;Logger opens or creates the logfile on first Write.  If the file exists and
is less than MaxSize megabytes, lumberjack will open and append to that file.
If the file exists and its size is &amp;gt;= MaxSize megabytes, the file is renamed
by putting the current time in a timestamp in the name immediately before the
file&amp;rsquo;s extension (or the end of the filename if there&amp;rsquo;s no extension). A new
log file is then created using original filename.&lt;/p&gt;

&lt;p&gt;Whenever a write would cause the current log file exceed MaxSize megabytes,
the current file is closed, renamed, and a new log file created with the
original name. Thus, the filename you give Logger is always the &amp;ldquo;current&amp;rdquo; log
file.&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Cleaning Up Old Log Files&lt;/h3&gt;

&lt;p&gt;Whenever a new logfile gets created, old log files may be deleted.  The most
recent files according to the encoded timestamp will be retained, up to a
number equal to MaxBackups (or all of them if MaxBackups is 0).  Any files
with an encoded timestamp older than MaxAge days are deleted, regardless of
MaxBackups.  Note that the time encoded in the timestamp is the rotation
time, which may differ from the last time that file was written to.&lt;/p&gt;

&lt;p&gt;If MaxBackups and MaxAge are both 0, no old log files will be deleted.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;func (*Logger) Close&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (l *Logger) Close() error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close implements io.Closer, and closes the current logfile.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;func (*Logger) Rotate&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (l *Logger) Rotate() error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rotate causes Logger to close the existing log file and immediately create a
new one.  This is a helper function for applications that want to initiate
rotations outside of the normal rotation rules, such as in response to
SIGHUP.  After rotating, this initiates a cleanup of old log files according
to the normal rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example of how to rotate in response to SIGHUP.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;l := &amp;amp;lumberjack.Logger{}
log.SetOutput(l)
c := make(chan os.Signal, 1)
signal.Notify(c, syscall.SIGHUP)

go func() {
    for {
        &amp;lt;-c
        l.Rotate()
    }
}()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;func (*Logger) Write&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;func (l *Logger) Write(p []byte) (n int, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write implements io.Writer.  If a write would cause the log file to be larger
than MaxSize, the file is closed, renamed to include a timestamp of the
current time, and a new log file is created using the original log file name.
If the length of the write is greater than MaxSize, an error is returned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Something New</title>
      <link>http://localhost:52783/post/first</link>
      <pubDate>Mon, 28 Jul 2014 11:19:12 UTC</pubDate>
      
      <guid>http://localhost:52783/post/first</guid>
      <description>&lt;p&gt;This is the first post of my new blog.  You may see old posts showing up behind
here, those have been pulled in from my personal blog at blog.natefinch.com.
I&amp;rsquo;ve decided to split off my programming posts so that people who only want to
see the coding stuff don&amp;rsquo;t have to see my personal posts, and people that only
want to see my personal stuff don&amp;rsquo;t have to get inundated with programming
posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:52783/about</link>
      <pubDate>Mon, 28 Jul 2014 11:14:25 UTC</pubDate>
      
      <guid>http://localhost:52783/about</guid>
      <description>&lt;p&gt;I am a developer at Canonical, working on Juju, a service orchestration tool.  I love coding in Go both at work and in my spare time.  When I&amp;rsquo;m not coding, I&amp;rsquo;m spending time with my family in semi-rural Massachusetts.  I love tabletop gaming and have been playing D&amp;amp;D since the 80&amp;rsquo;s.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>