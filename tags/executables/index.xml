<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>npf.io</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://npf.io/tags/executables/</link>
    <language>en-us</language>
    <author>Nate Finch</author>
    <copyright>2015 Nate Finch</copyright>
    <updated>Fri, 26 Jun 2015 06:41:56 EDT</updated>
    
    
    <item>
      <title>Testing os/exec.Command</title>
      <link>http://npf.io/2015/06/testing-exec-command/</link>
      <pubDate>Fri, 26 Jun 2015 06:41:56 EDT</pubDate>
      <author>Nate Finch</author>
      <guid>http://npf.io/2015/06/testing-exec-command/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://github.com/juju/juju&#34;&gt;Juju&lt;/a&gt;, we often have code that needs to run external
executables.  Testing this code is a nightmare&amp;hellip; because you really don&amp;rsquo;t want
to run those files on the dev&amp;rsquo;s machine or the CI machine.  But mocking out
os/exec is really hard.  There&amp;rsquo;s no interface to replace, there&amp;rsquo;s no function to
mock out and replace.  In the end, your code calls the Run method on the
exec.Cmd struct.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a bunch of bad ways you can mock this out - you can write out scripts to
disk with the right name and structure their contents to write out the correct
data to stdout, stderr and return the right return code&amp;hellip; but then you&amp;rsquo;re
writing platform-specific code in your tests, which means you need a Windows
version and a Linux version&amp;hellip; It also means you&amp;rsquo;re writing shell scripts or
Windows batch files or whatever, instead of writing Go.  And we all know that we
want our tests to be in Go, not shell scripts.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s the answer?  Well, it turns out, if you want to mock out exec.Command,
the best place to look is in the exec package&amp;rsquo;s tests themselves.  Lo and
behold, it&amp;rsquo;s right there in the first function of &lt;a href=&#34;https://github.com/golang/go/blob/master/src/os/exec/exec_test.go#L31&#34;&gt;exec_test.go&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func helperCommand(t *testing.T, s ...string) *exec.Cmd {
    cs := []string{&amp;quot;-test.run=TestHelperProcess&amp;quot;, &amp;quot;--&amp;quot;}
    cs = append(cs, s...)
    cmd := exec.Command(os.Args[0], cs...)
    cmd.Env = []string{&amp;quot;GO_WANT_HELPER_PROCESS=1&amp;quot;}
    return cmd
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;sub&gt;&lt;sup&gt;(one line elided for clarity) &lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;What the heck is that doing?  It&amp;rsquo;s pretty slick, so I&amp;rsquo;ll explain it.&lt;/p&gt;

&lt;p&gt;First off, you have to understand how tests in Go work.  When running &lt;code&gt;go test&lt;/code&gt;,
the go tool compiles an executable from your code, runs it, and passes it the
flags you passed to &lt;code&gt;go test&lt;/code&gt;.  It&amp;rsquo;s that executable which actually handles the
flags and runs the tests.  Thus, while your tests are running, os.Args[0] is the
name of the test executable.&lt;/p&gt;

&lt;p&gt;This function is making an exec.Command that runs the test executable, and
passes it the flag to tell the executable just to run a single test.  It then
terminates the argument list with &lt;code&gt;--&lt;/code&gt; and appends the command and arguments
that would have been given to exec.Command to run &lt;em&gt;your&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;The end result is that when you run the exec.Cmd that is returned, it will run
the single test from this package called &amp;ldquo;TestHelperProcess&amp;rdquo; and os.Args will
contain (after the &lt;code&gt;--&lt;/code&gt;) the command and arguments from the original call.&lt;/p&gt;

&lt;p&gt;The environment variable is there so that the test can know to do nothing unless
that environment variable is set.&lt;/p&gt;

&lt;p&gt;This is awesome for a few reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s all Go code. No more needing to write shell scripts.&lt;/li&gt;
&lt;li&gt;The code run in the excutable is compiled with the rest of your test code.  No more needing to worry about typos in the strings you&amp;rsquo;re writing to disk.&lt;/li&gt;
&lt;li&gt;No need to create new files on disk - the executable is already there and runnable, by definition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, let&amp;rsquo;s use this in a real example to make it more clear.&lt;/p&gt;

&lt;p&gt;In your production code, you can do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var execCommand = exec.Command
func RunDocker(container string) ([]byte, error) {
    cmd := execCommand(&amp;quot;docker&amp;quot;, &amp;quot;run&amp;quot;, &amp;quot;-d&amp;quot;, container)
    out, err := cmd.CombinedOutput()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mocking this out in test code is now super easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func fakeExecCommand(command string, args...string) *exec.Cmd {
    cs := []string{&amp;quot;-test.run=TestHelperProcess&amp;quot;, &amp;quot;--&amp;quot;, command}
    cs = append(cs, args...)
    cmd := exec.Command(os.Args[0], cs...)
    cmd.Env = []string{&amp;quot;GO_WANT_HELPER_PROCESS=1&amp;quot;}
    return cmd
}

const dockerRunResult = &amp;quot;foo!&amp;quot;
func TestRunDocker(t *testing.T) {
    execCommand = fakeExecCommand
    defer func(){ execCommand = exec.Command }()
    out, err := RunDocker(&amp;quot;docker/whalesay&amp;quot;)
    if err != nil {
        t.Errorf(&amp;quot;Expected nil error, got %#v&amp;quot;, err)
    }
    if string(out) != dockerRunResult {
        t.Errorf(&amp;quot;Expected %q, got %q&amp;quot;, dockerRunResult, out)
    }
}

func TestHelperProcess(t *testing.T){
    if os.GetEnv(&amp;quot;GO_WANT_HELPER_PROCESS&amp;quot;) != &amp;quot;1&amp;quot; {
        return
    }
    // some code here to check arguments perhaps?
    fmt.Fprintf(os.Stdout, dockerRunResult)
    os.Exit(0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you can do a lot more interesting things. The environment variables
on the command that fakeExecCommand returns make a nice side channel for telling
the executable what you want it to do.  I use one to tell the process to exit
with a non-zero error code, which is great for testing your error handling code.
You can see how the standard library uses its TestHelperProcess test
&lt;a href=&#34;https://github.com/golang/go/blob/master/src/os/exec/exec_test.go#L559&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully this will help you avoid writing really gnarly testing code (or even worse,
not testing your code at all).&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>